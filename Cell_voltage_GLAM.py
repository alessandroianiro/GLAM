#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 10 20:37:55 2020

@author: alessandro ianiro (alessandro.ianiro@unifr.ch)
"""

import matplotlib.pyplot as plt 
from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2Tk)
# Implement the default Matplotlib key bindings.
from matplotlib.backend_bases import key_press_handler
from matplotlib.figure import Figure
import tkinter
import numpy as np
from math import *
from tkinter import *



#root
root = Tk()
root.title('Power from breadth')

T_lab = Label(root, text="T [K]")
T_lab.grid(row=3, column=0, pady=5, sticky=N+S+E+W)
T_ent = Entry(root)
T_ent.grid(row=3, column=1, pady=5, sticky=N+S+E+W)
T_ent.insert(END,'295')


MEA_lab = Label(root, text="MEA concentration [M]")
MEA_lab.grid(row=5, column=0, pady=5, sticky=N+S+E+W)
MEA_ent = Entry(root)
MEA_ent.grid(row=5, column=1, pady=5, sticky=N+S+E+W)
MEA_ent.insert(END,'1')



N_cells_lab = Label(root, text="Number of cells in series")
N_cells_lab.grid(row=8, column=0, pady=5, sticky=N+S+E+W)
N_cells_ent = Entry(root)
N_cells_ent.grid(row=8, column=1, pady=5, sticky=N+S+E+W)
N_cells_ent.insert(END,'1')




def H2CO3_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH):
    
    H3Op = 10**(-pH)
    
    return -H3Op*K1*K10*(H3Op*K5 + 1)*((H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9))/(K9*(H3Op*K10*((H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9)) + 2*H3Op*K3*K4*K6*K9*MEA*(H3Op*K10 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*(H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1) + (H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9)))

def HCO3m_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH):
    
    H3Op = 10**(-pH)
    
    return  -K1*K10*(H3Op*K5 + 1)*((H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9))/(K4*K9*(H3Op*K10*((H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9)) + 2*H3Op*K3*K4*K6*K9*MEA*(H3Op*K10 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*(H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1) + (H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9)))

def CO3mm_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH):
    
    H3Op = 10**(-pH)
    
    return  -K1*K10*(H3Op*K5 + 1)*((H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9))/(H3Op*K3*K4*K9*(H3Op*K10*((H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9)) + 2*H3Op*K3*K4*K6*K9*MEA*(H3Op*K10 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*(H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1) + (H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9)))

def CO2_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH):
    
    H3Op = 10**(-pH)
    
    return -H3Op*K10*(H3Op*K5 + 1)*((H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9))/(K9*(H3Op*K10*((H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9)) + 2*H3Op*K3*K4*K6*K9*MEA*(H3Op*K10 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*(H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1) + (H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9)))

def RNH2_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH):
    
    H3Op = 10**(-pH)
    
    return (-H3Op**3*K10*K3*K4*K6*K9 - H3Op**2*K1*K10*K3*K5*K6 - H3Op**2*K3*K4*K6*K9 - H3Op*K1*K10*K3*K6 - 2*H3Op*K1*K10*K5*K6 + H3Op*K10*K3*K4*K9 + H3Op*K3*K4*K6*K9*MEA - 2*K1*K10*K6 + K3*K4*K9 + np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2))/(2*H3Op*K3*K4*K6*K9*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1))

def RNH3p_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH):
    
    H3Op = 10**(-pH)
    
    return  -K5*(H3Op**3*K10*K3*K4*K6*K9 + H3Op**2*K1*K10*K3*K5*K6 + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 2*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9 - np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2))/(2*K3*K4*K6*K9*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1))

def RNHCOOH_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH):
    
    H3Op = 10**(-pH)
    
    return  -K10*((H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) - (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9))/(2*K3*K4*K6*K9*(H3Op*K10 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*(H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1))

def RNHCOOm_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH):
    
    H3Op = 10**(-pH)
    
    return (-(H3Op*K10 + 1)*(H3Op*K5 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*np.sqrt(H3Op**6*K10**2*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**5*K1*K10**2*K3**2*K4*K5*K6**2*K9 + 2*H3Op**5*K10*K3**2*K4**2*K6**2*K9**2 + H3Op**4*K1**2*K10**2*K3**2*K5**2*K6**2 + 4*H3Op**4*K1*K10**2*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**4*K1*K10**2*K3**2*K4*K6**2*K9 + 4*H3Op**4*K1*K10**2*K3*K4*K5*K6**2*K9 + 2*H3Op**4*K1*K10*K3**2*K4*K5*K6**2*K9 - 2*H3Op**4*K10**2*K3**2*K4**2*K6*K9**2 - 2*H3Op**4*K10*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**4*K3**2*K4**2*K6**2*K9**2 + 2*H3Op**3*K1**2*K10**2*K3**2*K5*K6**2 + 4*H3Op**3*K1**2*K10**2*K3*K5**2*K6**2 - 2*H3Op**3*K1*K10**2*K3**2*K4*K5*K6*K9 + 8*H3Op**3*K1*K10**2*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**3*K1*K10**2*K3*K4*K6**2*K9 + 6*H3Op**3*K1*K10*K3**2*K4*K5*K6**2*K9*MEA + 2*H3Op**3*K1*K10*K3**2*K4*K6**2*K9 + 4*H3Op**3*K1*K10*K3*K4*K5*K6**2*K9 - 4*H3Op**3*K10*K3**2*K4**2*K6*K9**2 - 2*H3Op**3*K3**2*K4**2*K6**2*K9**2*MEA + H3Op**2*K1**2*K10**2*K3**2*K6**2 + 8*H3Op**2*K1**2*K10**2*K3*K5*K6**2 + 4*H3Op**2*K1**2*K10**2*K5**2*K6**2 - 2*H3Op**2*K1*K10**2*K3**2*K4*K6*K9 - 4*H3Op**2*K1*K10**2*K3*K4*K5*K6*K9 - 2*H3Op**2*K1*K10*K3**2*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3**2*K4*K6**2*K9*MEA + 12*H3Op**2*K1*K10*K3*K4*K5*K6**2*K9*MEA + 4*H3Op**2*K1*K10*K3*K4*K6**2*K9 + H3Op**2*K10**2*K3**2*K4**2*K9**2 + 2*H3Op**2*K10*K3**2*K4**2*K6*K9**2*MEA + H3Op**2*K3**2*K4**2*K6**2*K9**2*MEA**2 - 2*H3Op**2*K3**2*K4**2*K6*K9**2 + 4*H3Op*K1**2*K10**2*K3*K6**2 + 8*H3Op*K1**2*K10**2*K5*K6**2 - 4*H3Op*K1*K10**2*K3*K4*K6*K9 - 2*H3Op*K1*K10*K3**2*K4*K6*K9 - 4*H3Op*K1*K10*K3*K4*K5*K6*K9 + 4*H3Op*K1*K10*K3*K4*K6**2*K9*MEA + 2*H3Op*K10*K3**2*K4**2*K9**2 + 2*H3Op*K3**2*K4**2*K6*K9**2*MEA + 4*K1**2*K10**2*K6**2 - 4*K1*K10*K3*K4*K6*K9 + K3**2*K4**2*K9**2) + (H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1)*(H3Op**4*K10*K3*K4*K5*K6*K9 + H3Op**3*K1*K10*K3*K5**2*K6 + 2*H3Op**3*K10*K3*K4*K5*K6*K9*MEA + H3Op**3*K10*K3*K4*K6*K9 + H3Op**3*K3*K4*K5*K6*K9 + 2*H3Op**2*K1*K10*K3*K5*K6 + 2*H3Op**2*K1*K10*K5**2*K6 - H3Op**2*K10*K3*K4*K5*K9 + 3*H3Op**2*K3*K4*K5*K6*K9*MEA + H3Op**2*K3*K4*K6*K9 + H3Op*K1*K10*K3*K6 + 4*H3Op*K1*K10*K5*K6 - H3Op*K10*K3*K4*K9 - H3Op*K3*K4*K5*K9 + H3Op*K3*K4*K6*K9*MEA + 2*K1*K10*K6 - K3*K4*K9))/(2*H3Op*K3*K4*K6*K9*(H3Op*K10 + 1)*(H3Op**2*K10*K5 + 2*H3Op*K5 + 1)*(H3Op**3*K10**2*K5 + 3*H3Op**2*K10*K5 + H3Op*K10 + 2*H3Op*K5 + 1))

def OHm_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH):
    
    H3Op = 10**(-pH)
    
    return  1/(H3Op*K6)
    
def activitycoeff_f(Rion,Csalt):
    """
    J. Veerman et al. / Chemical Engineering Journal166 (2011) 256–268
    Calculates the activitiy coefficient from a 1:1 electrolite in water 
    
    Csalt = electrolite concentration [mol/L]
    
    Rion = solvation radius of the ion
    """
    return  np.exp(-0.51*Csalt**(1/2)/(1+(Rion/305)*Csalt**(1/2)))


#%%

plt.style.use('classic')
plt.figure(1,figsize=(9, 4), dpi=200)
#plt.tight_layout

fig, axs = plt.subplots()
c = axs

canvas = FigureCanvasTkAgg(fig, master=root)  # A tk.DrawingArea.

def _plot():
    
    MEA=float(MEA_ent.get())
    
    N_cells=(float(N_cells_ent.get()))

    T=(float(T_ent.get()))

    K1 = 0.0009988323451391654
    K2 = 60499391.6388100
    K3 = 43753705451.3644
    K4 = 3203.616022764352
    K5 = 4666049517.453555
    K6 = 200342057809765.0 
    K7 = 278249.5769518397 
    K8 = 15.380435931254475 
    K9 = 196.4761712861906 
    K10 = 55654539.92630169
    
    K5b = 10**(-(14-np.log10(K5)))
    pH_lean=-np.log10(2/(K6*(np.sqrt(K5b)*np.sqrt(K5b + 4*MEA) + K5b)))
    
    #print(pH_lean)
    P_HCO3m_a = 0.57
    P_RNH3p_a = 0.02
    P_RNHCOOm_a = 0.11
    P_H3Op_a = 0
    P_OHm_a = 1
    
    P_HCO3m_c = 0
    P_RNH3p_c = 0.94
    P_RNHCOOm_c = 0
    P_H3Op_c = 0
    P_OHm_c = 0.032
        
    
    
        
    #%%
    pH = np.linspace(pH_lean,7.5,40)

    H2CO3_c = H2CO3_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH).clip(0)
    HCO3m_c = HCO3m_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH).clip(0)
    CO3mm_c = CO3mm_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH).clip(0)
    CO2_c = CO2_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH).clip(0)
    RNH2_c = RNH2_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH).clip(0)
    RNH3p_c = RNH3p_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH).clip(0)
    RNHCOOH_c = RNHCOOH_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH).clip(0)
    RNHCOOm_c = RNHCOOm_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH).clip(0)
    OHm_c = OHm_f(K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,MEA,pH).clip(0)
    
    H3Op_c = 10**(-pH)
    

    out = np.transpose(np.vstack((pH, H2CO3_c,HCO3m_c,CO3mm_c,CO2_c,RNH2_c,RNH3p_c,RNHCOOH_c,RNHCOOm_c,OHm_c )))
    
    np.savetxt('concentrations_MEA='+repr(MEA)+'M_T='+repr(T)+'K_Ncells='+repr(N_cells)+'.txt', out, header = 'pH, H2CO3,HCO3m,CO3mm,CO2,RNH2,RNH3p,RNHCOOH,RNHCOOm,OHm')
    

    rHCO3m = 156
    rRNH3p = 137
    rRNHCOOm = 162
    rH3Op = 100
    rOHm =133
    
    HCO3m_c_0 = HCO3m_c[0]
    RNH3p_c_0 = RNH3p_c[0]
    RNHCOOm_c_0 = RNHCOOm_c[0]
    OHm_c_0 = OHm_c[0]
    H3Op_c_0 = H3Op_c[0]
    
    gammaHCO3m_0 = activitycoeff_f(rHCO3m,float(HCO3m_c_0))
    gammaRNH3p_0 = activitycoeff_f(rRNH3p,float(RNH3p_c_0))
    gammaRNHCOOm_0 = activitycoeff_f(rRNHCOOm,float(RNHCOOm_c_0))
    gammaH3Op_0 = activitycoeff_f(rH3Op,float(H3Op_c_0))
    gammaOHm_0 = activitycoeff_f(rOHm,float(OHm_c_0))
    gammaHCO3m = activitycoeff_f(rHCO3m,HCO3m_c.astype(float))
    gammaRNH3p = activitycoeff_f(rRNH3p,RNH3p_c.astype(float))
    gammaRNHCOOm = activitycoeff_f(rRNHCOOm,RNHCOOm_c.astype(float))
    gammaH3Op = activitycoeff_f(rH3Op,H3Op_c.astype(float))
    gammaOHm = activitycoeff_f(rOHm,OHm_c.astype(float))
    
    R = 8.314 
    F = 96485
    
    
    
    rich_plus =  gammaRNH3p*RNH3p_c*P_RNH3p_c + gammaH3Op*H3Op_c*P_H3Op_c + gammaHCO3m_0*HCO3m_c_0*P_HCO3m_c + gammaRNHCOOm_0*RNHCOOm_c_0*P_RNHCOOm_c + gammaOHm_0*OHm_c_0*P_OHm_c
    lean_plus =  gammaRNH3p_0*RNH3p_c_0*P_RNH3p_c + gammaH3Op_0*H3Op_c_0*P_H3Op_c + gammaHCO3m*HCO3m_c*P_HCO3m_c+gammaRNHCOOm*RNHCOOm_c*P_RNHCOOm_c+gammaOHm*OHm_c*P_OHm_c
    
    rich_minus =  gammaHCO3m*HCO3m_c*P_HCO3m_a + gammaRNHCOOm*RNHCOOm_c*P_RNHCOOm_a+gammaOHm*OHm_c*P_OHm_a + gammaRNH3p_0*RNH3p_c_0*P_RNH3p_a + gammaH3Op_0*H3Op_c_0* P_H3Op_a
    lean_minus =  gammaHCO3m_0*HCO3m_c_0*P_HCO3m_a + gammaRNHCOOm_0*RNHCOOm_c_0*P_RNHCOOm_a + gammaOHm_0*OHm_c_0*P_OHm_a + gammaRNH3p*RNH3p_c*P_RNH3p_a + gammaH3Op*H3Op_c* P_H3Op_a
    
    Q_plus = rich_plus/(lean_plus)
    Q_minus = rich_minus/(lean_minus)
    
    Q_plus = Q_plus.astype(float)
    Q_minus = Q_minus.astype(float)
    
    
    Ecell = N_cells*R*T/F*(np.log(Q_plus)+np.log(Q_minus))*1e3
    
    ECSM = R*T/F*(np.log(Q_plus))*1e3
    EASM = R*T/F*np.log(Q_minus)*1e3
    
    out2 = np.transpose(np.vstack((Ecell,ECSM,EASM)))
    
    np.savetxt('potentials_MEA='+repr(MEA)+'M_T='+repr(T)+'K_Ncells='+repr(N_cells)+'.txt', out2, header = 'Vtot,V_CEM,V_AEM')
    
   
    fig, axs = plt.subplots()
    c.clear()
    #print(Ecell)
    
    
    

        

    c.axhline(0, lw=1, color='blacK', linestyle='--')    
    c.plot(pH, EASM,'r',lw=3, label = r'$E_\mathrm{AEM}$')
    c.plot(pH, ECSM, 'b',lw=3, label = r'$E_\mathrm{CEM}$')
    c.plot(pH, Ecell, 'k',lw=3, label = r'$N_\mathrm{cell}\cdot V_\mathrm{cell}$')    
    c.legend(loc='upper right',fontsize=14)
    c.xaxis.set_major_locator(plt.MaxNLocator(5))  
    c.set_xlabel(xlabel=r'$pH \ \mathrm{CO_2-rich \ compartment}$',fontsize = 20)  
    c.set_ylabel(ylabel=r'$\Delta V \ /\ mV$',fontsize = 20)      
    canvas.draw()
    
    
canvas.get_tk_widget().grid(row=1,column=3, rowspan=15,sticky=N+S+E+W, pady=20, padx=20)


    #plt.savefig('Sugar_EtOH.png')
#%%
def _quit():
    root.quit()     # stops mainloop
    root.destroy()  # this is necessary on Windows to prevent
                    # Fatal Python Error: PyEval_RestoreThread: NULL tstate


button2 = tkinter.Button(master=root, text="Quit", command=_quit)
button2.grid(row=11, column=0, columnspan=2, pady=15, sticky=N+S+E+W, padx=20)



button = tkinter.Button(master=root, text="Plot", command=_plot)
button.grid(row=10, column=0, columnspan=2, pady=15, sticky=N+S+E+W, padx=20)


toolbarFrame = Frame(master=root)
toolbarFrame.grid(row=0,column=3, sticky=N+S+E+W, padx=20)
toolbar = NavigationToolbar2Tk(canvas, toolbarFrame)




#
#fig.savefig('Output_figure.png')
#fig.savefig('Output_figure.pdf')

root.mainloop()

